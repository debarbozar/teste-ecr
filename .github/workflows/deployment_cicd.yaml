name: Test Python and Deploy to ECR
on: 
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    if: github.ref_name == 'develop'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Install pytest-cov
        run: pip install pytest-cov

      - name: Format with Black
        run: black .

      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Set Environment Variables for Testing
        run: |
            export DB_DRIVER=${{ secrets.DB_DRIVER }}
            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_PORT=${{ secrets.DB_PORT }}
            export DB_DATABASE=${{ secrets.DB_DATABASE }}
            export JWT_SECRETE_KEY=${{ secrets.JWT_SECRETE_KEY }}
            export PASSWORD_HASH_ALGORITHM=${{ secrets.aname: Test Python and Deploy to ECR

on: 
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches: 
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    if: github.ref_name == 'develop'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: "3.12"
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: Format with Black
        run: black .
      
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      - name: Set Environment Variables for Testing
        env:
          DB_DRIVER: ${{ secrets.DB_DRIVER }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          JWT_SECRETE_KEY: ${{ secrets.JWT_SECRETE_KEY }}
          PASSWORD_HASH_ALGORITHM: ${{ secrets.PASSWORD_HASH_ALGORITHM }}
          JWT_EXPIRE_MINUTES: ${{ secrets.JWT_EXPIRE_MINUTES }}
        run: echo "Environment variables set for testing"
      
      - name: Test with pytest and coverage
        run: pytest --cov=app --cov-report=term --cov-fail-under=100

  deploy:
    if: github.ref_name == 'main' || github.ref_name == 'develop'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout on project
        uses: actions/checkout@v4
      
      - name: Authentication on AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set Repository for ECR
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "ECR_REPOSITORY=prod-star-api" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "develop" ]; then
            echo "ECR_REPOSITORY=star-api-hmg" >> $GITHUB_ENV
          fi
      
      - name: Build, Tag, and Push the Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG_LATEST: latest
        run: |
          echo "Building Docker image for $ECR_REPOSITORY"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          echo "Pushing Docker image to ECR: $ECR_REPOSITORY"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      
      - name: Deploy Complete
        run: echo "Deploy completed for branch ${{ github.ref_name }}"
PASSWORD_HASH_ALGORITHM }}
             export JWT_EXPIRE_MINUTES=${{ secrets.JWT_EXPIRE_MINUTES }}

      - name: Test with pytest and coverage
        run: |
          pytest --cov=app --cov-report=term --cov-fail-under=100
  
  deploy:
    if: github.ref_name == 'main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout on project
        uses: actions/checkout@v4

      - name: Authentication on AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

        id: set-repo
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "ECR_REPOSITORY=star-api" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "develop" ]; then
            echo "ECR_REPOSITORY=star-api-hmg" >> $GITHUB_ENV
          fi

      - name: Build, Tag, and Push the Image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
          IMAGE_TAG_LATEST: latest
        run: |
          echo "Building Docker image for $ECR_REPOSITORY"
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          
          echo "Pushing Docker image to ECR: $ECR_REPOSITORY"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy Complete
        run: echo "Deploy completed for branch ${{ github.ref_name }}"" >> $GITHUB_ENV
          fi